// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  preferences   Preference?
  continueWatching ContinueWatching[]
  watchHistory  WatchHistory[]
  watchlist     Watchlist[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Cinely-specific models
model UserProfile {
  userId       String   @id
  displayName  String?
  avatarUrl    String?
  country      String?   // for rights windows later
  onboardingAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preference {
  userId     String
  genres     String[]   // e.g., ["Thriller","Horror","True Crime"]
  ratingsMax String?    // e.g., "R"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

model ContinueWatching {
  userId        String
  titleId       String
  lastPosSec    Int        @default(0)   // resume position
  durationSec   Int        @default(0)
  lastUpdatedAt DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, titleId])
}

model WatchHistory {
  id        String   @id @default(cuid())
  userId    String
  titleId   String
  startedAt DateTime
  completed Boolean  @default(false)
  minutes   Int      @default(0)
  device    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watchlist {
  userId   String
  titleId  String
  addedAt  DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, titleId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  kind      String   // "new_release" | "expiring" | "promo"
  title     String
  body      String
  href      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecommendationSeed {
  id        String   @id @default(cuid())
  titleId   String
  genre     String
  weight    Float    @default(1)
  // populated nightly from watch data to help cold-start
}

// Content models
model Title {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?
  posterUrl     String?
  backdropUrl   String?
  releaseDate   DateTime?
  durationSec   Int?
  genres        String[]
  rating        String?  // "G", "PG", "PG-13", "R", "NC-17"
  muxPlaybackId String?
  muxAssetId    String?
  isFree        Boolean  @default(false)
  isOriginal    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  continueWatching ContinueWatching[]
  watchHistory     WatchHistory[]
  watchlist        Watchlist[]
  recommendationSeeds RecommendationSeed[]
}
